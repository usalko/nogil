# This script generates the opcode.h header file.

import sys
import tokenize

header = """
/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE_H
#define Py_OPCODE_H
#ifdef __cplusplus
extern "C" {
#endif


// Instruction opcodes for compiled code
//    name                   opcode   size   wide_size
#define OPCODE_LIST(_) \\
""".lstrip()

intrinsics_header = """
#define INTRINSIC_LIST(_) \\
"""

footer = """

enum {
#define OPCODE_NAME(Name, Code, ...) Name = Code,
OPCODE_LIST(OPCODE_NAME)
#undef OPCODE_NAME
};

enum {
#define OPSIZE(Name, Code, Size, ...) OP_SIZE_##Name = Size,
OPCODE_LIST(OPSIZE)
#undef OPSIZE
};

enum {
#define OPSIZE(Name, Code, Size, WideSize) OP_SIZE_WIDE_##Name = WideSize,
OPCODE_LIST(OPSIZE)
#undef OPSIZE
};

enum {
#define INTRINSIC_CODE(Name, Code) Intrinsic_##Name = Code,
INTRINSIC_LIST(INTRINSIC_CODE)
#undef INTRINSIC_CODE
};

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE_H */
"""


def main(opcode_py, outfile='Include/opcode.h'):
    opcode = {}
    with tokenize.open(opcode_py) as fp:
        code = fp.read()
    exec(code, opcode)
    opcodes = [op for op in opcode['opcodes'] if op is not None]
    intrinsics = [i for i in opcode['intrinsics'] if i is not None]
    with open(outfile, 'w') as fobj:
        fobj.write(header)
        for bytecode in opcodes:
            name = bytecode.name + ","
            terminator = ' \\' if bytecode != opcodes[-1] else ''
            fobj.write("    _(%-24s %4d,   %3d,    %3d)%s\n" % (name, bytecode.opcode, bytecode.size, bytecode.wide_size, terminator))

        fobj.write(intrinsics_header)
        for intrinsic in intrinsics:
            name = intrinsic.name + ","
            terminator = ' \\' if intrinsic != intrinsics[-1] else ''
            fobj.write("    _(%-28s %4d)%s\n" % (name, intrinsic.code, terminator))
        fobj.write(footer)

    print("%s regenerated from %s" % (outfile, opcode_py))


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2])
